!<arch>
0-isupper.c/    0           0     0     644     288       `
#include "main.h"

/**
 * _isupper - checks for uppercase character
 *
 * @c: parameter hard-coded in main
 *
 * Return: 0 or 1
 */

int _isupper(int c)
{
  int i;

  if (c >= 'A' && c <= 'Z')
    {
      i = 1;
      return (i);
    }
  else
    {
      i = 0;
      return (i);
    }
}
0-memset.c/     0           0     0     644     509       `
#include "main.h"
#include <stdio.h>

/**
 * _memset - function that fills memory with a constant byte
 *
 * @s: parameter defined in main, pointer to memory area
 * @b: parameter defined in main, constant byte
 * @n: parameter defined in main, number of bytes to be filled
 *
 * Return: memory address of function (memory area)
 */

char *_memset(char *s, char b, unsigned int n)
{
  unsigned int i;
  char *tmp = s;

  for (i = 0; i < n; i++)
    {
      *s = b;
      s++;
    }
  s = tmp;
  return (s);
}

0-strcat.c/     0           0     0     644     466       `
#include "main.h"
#include <stdio.h>

/**
 * _strcat - function that concatenates two strings
 *
 * @dest: parameter defined in main
 * @src: parameter defined in main
 *
 * Return: memory address of function (string)
 */

char *_strcat(char *dest, char *src)
{
  char *tmp = dest;

  while (*dest != '\0')
    {
      dest++;
    }
  while (*src != '\0')
    {
      *dest = *src;
      src++;
      dest++;
    }
  *dest++ = '\0';
  dest = tmp;
  return (dest);
}
100-atoi.c/     0           0     0     644     172       `
#include "main.h"

/**
 * _atoi - tbd
 *
 * @s: parameter defined in main, pointer to memory
 *
 * Return: 0 for now
 */

int _atoi(char *s)
{
  s = s + 1;
  return (0);
}
1-isdigit.c/    0           0     0     644     268       `
#include "main.h"

/**
 * _isdigit - checks for a digit (0 through 9)
 *
 * @c: parameter hard-coded in main
 *
 * Return: 1 or 0
 */

int _isdigit(int c)
{
  int i;

  if (c >= '0' && c <= '9')
    {
      i = 1;
    }
  else
    {
      i = 0;
    }
  return (i);
}
1-memcpy.c/     0           0     0     644     575       `
#include "main.h"
#include <stdio.h>

/**
 * _memcpy - function that copies memory area
 *
 * @dest: parameter defined in main, pointer to memory area (dest)
 * @src: parameter defined in main, pointer to another memory area (src)
 * @n: parameter defined in main, number of bytes to be copied from src
 *
 * Return: memory address of function (memory area)
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
  unsigned int i;
  char *tmp = dest;

  for (i = 0; i < n; i++)
    {
      *dest = *src;
      dest++;
      src++;
    }
  dest = tmp;
  return (dest);
}

1-strncat.c/    0           0     0     644     548       `
#include "main.h"
#include <stdio.h>

/**
 * _strncat - function that concatenates two strings
 *
 * @dest: parameter defined in main
 * @src: parameter defined in main
 * @n: parameter defined in main
 *
 * Return: memory address of function (string)
 */

char *_strncat(char *dest, char *src, int n)
{
  char *tmp1 = dest;
  char *tmp2 = src;

  while (*dest != '\0')
    {
      dest++;
    }
  while (src < tmp2 + n && *src != '\0')
    {
      *dest = *src;
      src++;
      dest++;
    }
  *dest++ = '\0';
  dest = tmp1;
  return (dest);
}
2-strchr.c/     0           0     0     644     424       `
#include "main.h"
#include <stdio.h>

/**
 * _strchr - function that locates a character in a string
 *
 * @s: parameter defined in main, pointer to memory (string)
 * @c: parameter defined in main, character to be located
 *
 * Return: memory address of function (memory area)
 */

char *_strchr(char *s, char c)
{
  while (s++)
    {
      if (*s == c)
	return (s);
      if (!*s)
	return (NULL);
    }
  return (NULL);
}
2-strlen.c/     0           0     0     644     261       `
#include "main.h"

/**
 * _strlen - function that returns the length of a string
 *
 * @s: parameter defined in main
 *
 * Return: length of string
 */

int _strlen(char *s)
{
  int i = 0;

  while (*s != '\0')
    {
      i++;
      s++;
    }
  return (i);
}

2-strncpy.c/    0           0     0     644     766       `
#include "main.h"
#include <stdio.h>

/**
 * _strncpy - function that concatenates two strings
 *
 * @dest: parameter defined in main
 * @src: parameter defined in main
 * @n: parameter defined in main
 *
 * Return: memory address of function (string)
 */

char *_strncpy(char *dest, char *src, int n)
{

  char *tmp1 = dest;
  char *tmp2 = src;

  while (src < tmp2 + n && *src != '\0')
    {
      *dest = *src;
      src++;
      dest++;
    }
  while (src < tmp2 + n)
    {
      *dest = '\0';
      dest++;
      src++;
    }
  dest = tmp1;
  src = tmp2;

  /*
   *int i;
   *char *tmp = dest;
   *
   *for (i = 0; i < n && *src != '\0'; i++)
   **dest++ = *src++;
   *
   *for ( ; i < n; i++)
   **dest++ = '\0';
   *
   *dest = tmp;
   */

  return (dest);
}
3-islower.c/    0           0     0     644     301       `
#include "main.h"

/**
 * _islower - checks for lowercase character
 *
 * @c: parameter hard-coded in main function
 *
 * Return: 0 or 1
 */

int _islower(int c)
{
  int i;

  if (c >= 'A' && c <= 'Z')
    {
      i = 0;
    }
  else if (c >= 'a' && c <= 'z')
    {
      i = 1;
    }
  return (i);
}

3-puts.c/       0           0     0     644     275       `
#include "main.h"

/**
 * _puts - function that prints a string, followed by a new line, to stdout
 *
 * @str: parameter defined in main
 *
 * Return: void
 */

void _puts(char *str)
{
  while (*str != '\0')
    {
      _putchar(*str);
      str++;
    }
  _putchar('\n');
}

3-strcmp.c/     0           0     0     644     545       `
#include "main.h"
#include <stdio.h>

/**
 * _strcmp - function that compares two strings
 *
 * @s1: parameter defined in main
 * @s2: parameter defined in main
 *
 * Return: 15 or -15 or 0
 */

int _strcmp(char *s1, char *s2)
{
  /*
   *char *tmp1 = s1;
   *char *tmp2 = s2;
   */
  while (*s1 != '\0')
    {
      if (*s1 == *s2)
	{
	  s1++;
	  s2++;
	}
      else
	{
	  if (*s1 > *s2)
	    return (*s1 - *s2);
	  else if (*s1 < *s2)
	    return (*s1 - *s2);
	  s1++;
	  s2++;
	}
    }
  /*
   *s1 = tmp1;
   *s2 = tmp2;
   */
  return (0);
}

3-strspn.c/     0           0     0     644     698       `
#include "main.h"
#include <stdio.h>

/**
 * _strspn - function that gets the length of a prefix substring
 *
 * @s: parameter defined in main, pointer to memory (string)
 * @accept: parameter defined in main, characters to be compared with s string
 *
 * Return: integer, number of bytes common to the two strings
 */

unsigned int _strspn(char *s, char *accept)
{
  int size = 0;
  unsigned int bytes = 0;
  char *tmp = accept;
  int i;

  while (*accept++)
    size++;
  accept = tmp;

  while (*s)
    {
      accept = tmp;
      i = 0;
      while (accept < tmp + size)
	{
	  if (*s == *accept)
	    bytes++, i++;
	  accept++;
	}
      if (i == 0)
	break;
      s++;
    }
  return (bytes);
}
4-isalpha.c/    0           0     0     644     306       `
#include "main.h"

/**
 * _isalpha - checks for lowercase character
 *
 * @c: parameter is hard-coded in main function
 *
 * Return: 0 or 1
 */

int _isalpha(int c)
{
  int i;

  if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))
    {
      i = 1;
    }
  else
    {
      i = 0;
    }
  return (i);
}
4-strpbrk.c/    0           0     0     644     706       `
#include "main.h"
#include <stdio.h>

/**
 * _strpbrk - function that searches a string for any of a set of bytes
 *
 * @s: parameter defined in main, pointer to memory (string)
 * @accept: parameter defined in main, characters to be compared with s string
 *
 * Return: integer, pointer to the first byte common to the two strings
 */

char *_strpbrk(char *s, char *accept)
{
  int size = 0;
  char *ptr = s;
  char *tmp = accept;
  int i;

  while (*accept++)
    size++;
  accept = tmp;

  while (*s)
    {
      accept = tmp;
      i = 0;
      while (accept < tmp + size)
	{
	  if (*s == *accept)
	    ptr = s, i++;
	  accept++;
	}
      if (i == 1)
	return (ptr);
      s++;
    }
  return (NULL);
}
5-strstr.c/     0           0     0     644     957       `
#include "main.h"
#include <stdio.h>

/**
 * _strstr - function that locates a substring
 *
 * @haystack: parameter defined in main, pointer to memory (string)
 * @needle: parameter defined in main, characters to be compared with s string
 *
 * Return: a pointer to the beginning of the located substring
 * or NULL if the substring is not found
 */

char *_strstr(char *haystack, char *needle)
{
  int size = 0;
  char *ptr = haystack;
  char *tmp1 = needle;
  int i, j;

  while (*needle++)
    size++;
  needle = tmp1;

  while (*haystack)
    {
      needle = tmp1;
      i = 0;
      while (needle < tmp1 + size)
	{
	  if (*haystack == *needle)
	    {
	      i++;
	    }
	  ptr = haystack;
	  needle++;
	  haystack++;
	  for (j = 1; j < size; j++)
	    {
	      if (*haystack == *needle)
		{
		  i++;
		}
	      needle++;
	      haystack++;
	    }
	}
      if (i == size)
	return (ptr);
      haystack = ptr;
      haystack++;
    }
  return (NULL);
}

6-abs.c/        0           0     0     644     214       `
#include "main.h"

/**
 * _abs - prints the absolute value of an integer
 *
 * @n: is hard-coded in main function
 *
 * Return: n
 */

int _abs(int n)
{
  if (n < 0)
    {
      n = n * (-1);
    }
  return (n);
}
9-strcpy.c/     0           0     0     644     613       `
#include "main.h"
#include <stdio.h>

/**
 * _strcpy - function that copies the string pointed to by src,
 * including the terminating null byte (\0), to the buffer pointed to by dest
 *
 * @dest: parameter defined in main
 * @src: parameter defined in main
 *
 * Return: the pointer to dest
 */

char *_strcpy(char *dest, char *src)
{
  char *tmp = dest;

  while (*src != '\0')
    {
      *dest = *src;
      src++;
      dest++;
    }
  *dest = '\0';
  return (tmp);
  /*
   *int i = 0;
   *
   *while (src[i] != '\0')
   *{
   *dest[i] = src[i];
   *i++;
   *}
   *dest[i] = '\0';
   *return (dest);
   */
}

main.c/         0           0     0     644     144       `
#include "main.h"

int main(void)
{
  _puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
  return (0);
}
_putchar.c/     0           0     0     644     248       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
  return (write(1, &c, 1));
}
